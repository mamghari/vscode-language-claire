{
  "scopeName": "source.claire",
  "name": "CLAIRE",
  "fileTypes": [
    "cl"
  ],
  "patterns": [
    {
      "include": "#code"
    }
  ],
  "repository": {
    "block": {
      "patterns": [
        {
          "begin": "{",
          "end": "}",
          "name": "meta.block.claire",
          "patterns": [
            {
              "include": "#code"
            }
          ]
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "match": "(integer|string|boolean|void|type|float|any|bag|set|list|tuple|method|nil|char)",
          "name": "support.class.claire"
        },
        {
          "match": "(abort|type_name|copy|fopen|format|freadline|fread|freadwrite|funcall|fwrite|integer!|list!|log|min|max|new|put|pwd|random|setenv|gc|int|getenv|getc|find|fcopy|length|concat|substring|string!|trim|write)",
          "name": "support.function.cool"
        },
        {
          "match": "(self|SELF_TYPE)",
          "name": "variable.language.cool"
        }
      ]
    },
    "class": {
      "begin": "((?i:class))\\s+([A-Z][A-Za-z0-9_]*)(\\s+((?i:inherits))\\s+([A-Z][A-Za-z0-9_]*))?\\b",
      "beginCaptures": {
        "1": {
          "name": "storage.type.claire"
        },
        "2": {
          "name": "entity.name.type.class.claire"
        },
        "4": {
          "name": "keyword.operator.claire"
        },
        "5": {
          "name": "entity.name.type.class.claire"
        }
      },
      "end": "}",
      "name": "meta.class.claire",
      "patterns": [
        {
          "begin": "{",
          "end": "(?=})",
          "name": "meta.class.body.cs",
          "patterns": [
            {
              "include": "#method"
            },
            {
              "include": "#code"
            }
          ]
        }
      ]
    },
    "code": {
      "patterns": [
        {
          "include": "#block"
        },
        {
          "include": "#builtins"
        },
        {
          "include": "#class"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#method"
        }
      ]
    },
    "line_comment": {
      "begin": "//",
      "end": "$\\n?",
      "name": "comment.line.double-slash.claire"
    },
   "line_comment_semicolon": {
      "begin": ";",
      "end": "$\\n?",
      "name": "comment.line.semicolon.claire"
    },
   "sharp_comment": {
      "begin": "#",
      "end": "$\\n?",
      "name": "comment.line.sharp.claire"
    },
    "block_comment": {
      "begin": "\\/\\*",
      "end": "\\*\\/\\n?",
      "name": "comment.block.documentation.claire",
      "patterns": [
        {
          "include": "#block_comment"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "include": "#line_comment"
        },
	{
          "include": "#line_comment_semicolon"
        },
	{
          "include": "#sharp_comment"
        },
        {
          "include": "#block_comment"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.claire"
        },
        {
          "match": "\\b([1-9][0-9]*|0)\\b",
          "name": "constant.numeric.claire"
        },
        {
          "begin": "(?<!\\\\)\"",
          "end": "(?<!\\\\)\"",
          "name": "string.quoted.double.claire",
          "patterns": [
            {
              "match": "\\\\(n|t|b|c|v|f|r)",
              "name": "constant.character.escape.claire"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(if|then|else|when|while|for|forall|case)\\b",
          "name": "keyword.control.claire"
        },
        {
          "match": "\\b(in|inherits|isvoid|let|new|of|not|list|set|class|final|member)\\b",
          "name": "keyword.operator.claire"
        }
      ]
    },
    "method": {
      "patterns": [
        {
          "match": "\\b([a-z][A-Za-z0-9_]*)\\s*\\(\\s*(?:([a-z][A-Za-z0-9_]*)\\s*:\\s*([A-Z][A-Za-z0-9_]*))?(?:\\s*,\\s*([a-z][A-Za-z0-9_]*)\\s*:\\s*([A-Z][A-Za-z0-9_]*))*\\s*\\)\\s*:\\s*([A-Z][A-Za-z0-9_]*)\\b",
          "name": "meta.method.claire",
          "captures": {
            "1": {
              "name": "entity.name.function.claire"
            },
            "2": {
              "name": "variable.parameter.claire"
            },
            "3": {
              "name": "storage.type.claire"
            },
            "4": {
              "name": "variable.parameter.claire"
            },
            "5": {
              "name": "storage.type.claire"
            },
            "6": {
              "name": "storage.type.claire"
            }
          }
        }
      ]
    }
  }
}
